function [xval, r2, rmse] = feXvalidate(M,dSig, fitMethod, crossValType)
%
% [xval, r2, rmse]  = feXvalidate(M,dSig, fitMethod, [crossValType])
%
% We use split-half cross validation so the we fit the model only twice.
%
% This can be improved but calculations become slow if we make the cross
% validation scheme more interesting.
%
% Franco (C) 2012 Stanford VISTA team.

if notDefined('crossValType'),crossValType = 'Split Half';end

% Squeeze out spaces and force lower case
crossValType = mrvParamFormat(crossValType);

switch crossValType
  case {'splithalf'}
    % Split data and the model into even and odd halfs
    evenHalf          = ones(length(dSig),1);
    evenHalf(2:2:end) = 0;
    evenHalf          = logical(evenHalf);
    oddHalf           = ~evenHalf;
    
    % Fit the LiFE to odd and even halfs
    fprintf('LiFE - Computing cross-validation with Stochastic Gradient Descend method...\n')
    evenFit = feFitModel(M(evenHalf,:), dSig(evenHalf),fitMethod);
    oddFit  = feFitModel(M(oddHalf,:),  dSig(oddHalf), fitMethod);
    
    % Predicted signal with the weights generated by the other half of the signal.
    evenPSig  = mctComputePredictedSignal(M(evenHalf,:), oddFit.weights);
    oddPSig   = mctComputePredictedSignal(M(oddHalf,:), evenFit.weights);
    
    % Compute quality of fit.
    [evenRmse evenR2] = feComputePredictionQuality(dSig(evenHalf),evenPSig);
    [oddRmse   oddR2] = feComputePredictionQuality(dSig(oddHalf),  oddPSig);
    
    % Set the R2 and RMSE in the fe structure.
    % These are stored because it takes time to compute them.
    xval.r2.mean = mean( [evenR2 oddR2] );
    xval.r2.std  = std(  [evenR2 oddR2] );
    xval.r2.all  =       [evenR2 oddR2];
    
    xval.rmse.mean = mean( [evenRmse  oddRmse] );
    xval.rmse.std  = std(  [evenRmse  oddRmse] );
    xval.rmse.all  =       [evenRmse  oddRmse];

  otherwise
    error('Unknown cross validation type %s\n',crossValType);
end

% Return all the r2 computed. Thi sis useful for bootstrapping and testing hypothesis.
r2   = xval.r2.all;
rmse = xval.rmse.all;

return
