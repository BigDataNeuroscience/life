function [dwi nifti] = mctBuildDwiFromFg(fg,bvecs,bval,S0, volSiz)
%
% [dwi nifti] = mctBuildDwiFromFg(fg,bvecs,bval,S0, [volSiz])
%
% Generate a volume filleds with diffusion-weighted signal as produced by
% the sum of the tensors at each node in fiber group.
% 
% The fibers are used to predict the signal in all the voxels they pass
% through.
%
% Inputs:
% - *fg*, is a fiber group structure.
% - *bval* is the the b value, e.g., 800, 100, 2000, 3000. It is rescaled to m^2/s
% - *nbvecs* can either be:
%            1. the number of diffusion directions measured, e.g., 12, 90,
%               150 etc. OR
%            2. An array of bvecs.
% - *S0* is the signal for the non-diffusion direction (i.e., mean diffusivity, e.g., 500)
%        it can also be passed in as an array of S0 signal of size volSiz. 
% - *volSiz* is the size of the volume
% 
% Outputs:
%  - dwi is a structure containing the diffusion signal generated by the real fibers (fghit)  
%  - nifti is a nifit file structure containing the diffusion signal in
%    dwi.
%  - hitRoiCoords are the voxel coordinates where the fgHit fibers go
%    through.
%  - faRoiCoords are the voxel coordinates where the fgFa fibers go through. 
%
% Example: 
%     % Simulate a fiber group
%     S0     = 500; % Mean diffusivity
%     nbvecs = 12;
%     bval   = 800;
%     [fg, ~,~,~,~,~, volSiz] = mctSimulateFG('ks2',bval, nbvecs, S0,1);
%     [dwi nifti coords] = mctBuildDwiFromFg(fg, bvecs, bval, S0, volSiz);
%
% See also, s_mct_simulated, mctSimulateFG.m
%
% Franco
%
% (C) 2012 Stanford VISTA team. 



% The number of bvecs was passed in, instead of an actual array of bvecs
% We generate bvecs using Camino's precomputed bvecs
if (size(bvecs,1) == 1)
  bvecs = mctSimulateBvecs(bvecs);
  bvecs = [bvecs; zeros(1,3)];
  nbvecs = size(bvecs,1);
else
  nbvecs = bvecs;
end

% We transform in units of um2/s
if (bval < 100) % a bval this small means that it was passed with correct units 
  bval = bval  / 1000;
end

if all(size(bval)==size(bvecs))
  bvals = bval;
else
  bvals = bval * ones(size(bvecs,1) - 1,1);
  bvals = [bvals; 0];
end

% Find the voxels intersecting the fibers.
roiCoords  = fefgGet(fg,'unique image coords');

% find the size of the dwi volume.
if notDefined('volSiz'), volSiz = max(roiCoords);end

% Number of voxels in the coiCoords
nVoxels = size(roiCoords,1); 

% For each voxel, compute the pairing of fiber index and the node index.
voxel2FNpair = fefgGet(fg,'voxel 2 fiber node pairs',roiCoords);

% if the Fibers did not have tensors precomputed, we compute them.
if ~isfield(fg,'Q')
  disp('Computing fibers'' tensors (fgTensor.m)');
  d_ad = 1.5; d_rd = 0.5;
  dParms(1) = d_ad; dParms(2) = d_rd; dParms(3) = d_rd;
  fg.Q   = fgTensors(fg, dParms);
end

% Now compute the signal using the fibers.
nNodes    = zeros(1,nVoxels);  % Number of nodes in each voxel
nodesDsig = cell(1,nVoxels);
voxDsig   = nan(nVoxels,nbvecs);
for vv  = 1:nVoxels
    % Number of nodes in each voxel.
    nNodes(vv) = size(voxel2FNpair{vv},1);
    
    % Compute tensors for each node.
    thisQ{vv} = zeros(nNodes(vv), 9); % Allocate space for all the tensors (9 is for the 3 x 3 tensor components)
    for ii = 1:nNodes(vv)           % Get the tensors
        thisQ{vv}(ii,:) = fg.Q{voxel2FNpair{vv}(ii,1)}(voxel2FNpair{vv}(ii,2),:);
    end
    
    % Generate dwi signal for each node.
    for ii = 1:nNodes(vv) 
        nodesDsig{vv}(ii,:) = dwiComputeSignal(S0,bvecs,bvals,thisQ{vv}(ii,:));
    end
    
    % Generate  the signal for each voxel.
    voxDsig(vv,:) = sum(nodesDsig{vv},1);
end

% build a volume for the dwi, filled with zeros
dwi_data = zeros(volSiz(1),volSiz(2),volSiz(3),nbvecs + 1);   

% Add the dwi signal generated with the fiber in each voxel
for vv = 1:size(roiCoords,1)
    dwi_data(roiCoords(vv,1),roiCoords(vv,2),roiCoords(vv,3),1:nbvecs) = voxDsig(vv,:);
end

% Add the non-diffusion direction signal in last position.
zeroDiffIndex = find(bvals == 0);
if all(size(S0) == size(volSiz))
   dwi_data(:,:,:,zeroDiffIndex) = S0;
else
   dwi_data(:,:,:,zeroDiffIndex) = S0 * ones(volSiz(1),volSiz(2),volSiz(3));
end

% Make a nifti file structure and a dwi structure.
niftiFileName = sprintf('ni_struct_%s',fg.name);
dwiFileName   = sprintf('dwi_struct_%s',fg.name);
nifti         = niftiGetStruct(dwi_data);
nifti.descrip = 'Fiber-simulated diffusion nifti data';
nifti.fname   = niftiFileName;
dwi           = dwiCreate('name',dwiFileName,'nifti',nifti,'bvecs',bvecs,'bvals',bvals);

end % end main function
